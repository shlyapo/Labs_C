        -:    0:Source:func.c
        -:    0:Graph:func.gcno
        -:    0:Data:func.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "main.h"
        -:    2:
function dateToInt called 1 returned 100% blocks executed 100%
        1:    3:int dateToInt(char date[15]){
        1:    3-block  0
        -:    4:    int d,m,y;
        1:    5:    d=(date[0]-'0')*10+(date[1]-'0');
        1:    6:    m=((date[3]-'0')*10+(date[4]-'0'))*30;
        1:    7:    y=((date[6]-'0')*1000+(date[7]-'0')*100+(date[8]-'0')*10+(date[9]-'0'))*365;
        1:    8:    return d+m+y;
        1:    8-block  0
unconditional  0 taken 1
        -:    9:}
        -:   10:
function OnVacationWork called 1 returned 100% blocks executed 40%
        1:   11:int OnVacationWork(DblList *lst, char date_now[15]){
        1:   11-block  0
        1:   12:    list *tmp = lst->head;
        1:   13:    int termD=0;
        1:   14:    printf("\nEmployee on vacation:");
        1:   14-block  0
call    0 returned 1
        1:   15:    while (tmp) {
unconditional  0 taken 1
        1:   15-block  0
branch  1 taken 1
branch  2 taken 0 (fallthrough)
        1:   16:        int i=0;
        1:   17:        if(i==0){
        1:   17-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   18:            return termD;
        1:   18-block  0
unconditional  0 taken 1
    #####:   19:        } i++;
    #####:   20:        termD = dateToInt(date_now)-dateToInt(tmp->DateOfEmployment);
    $$$$$:   20-block  0
call    0 never executed
call    1 never executed
    #####:   21:        if(termD<=0){
branch  0 never executed
branch  1 never executed
    #####:   22:            printf("\nON vacation\n");
    $$$$$:   22-block  0
call    0 never executed
    #####:   23:            printf("\n\t%s %s %s %s %s %s %s %s %s %s %s %s \n",tmp->Name,tmp->LastName,tmp->MatherName,tmp->BDay,tmp->PassNum,tmp->SocialNum,tmp->Education,tmp->Position,tmp->Salaru,tmp->DateOfEmployment,tmp->NoteP,tmp->NoteM);
call    0 never executed
unconditional  1 never executed
        -:   24:        }
        -:   25:        else{
    #####:   26:            printf("\nOn work\n");
    $$$$$:   26-block  0
call    0 never executed
    #####:   27:            printf("\n\t%s %s %s %s %s %s %s %s %s %s %s %s \n",tmp->Name,tmp->LastName,tmp->MatherName,tmp->BDay,tmp->PassNum,tmp->SocialNum,tmp->Education,tmp->Position,tmp->Salaru,tmp->DateOfEmployment,tmp->NoteP,tmp->NoteM);
call    0 never executed
unconditional  1 never executed
        -:   28:        }
    #####:   29:        tmp=tmp->next;
    $$$$$:   29-block  0
unconditional  0 never executed
        -:   30:    }
    #####:   31:}
    $$$$$:   31-block  0
unconditional  0 never executed
        -:   32:
function DismissP called 1 returned 100% blocks executed 75%
        1:   33:int DismissP(DblList *lst, char date_now[15]){
        1:   33-block  0
        1:   34:    list *tmp = lst->head;
        1:   35:    int termD=0;
        1:   36:    int i=0;
        1:   37:    printf("Dismiss granny\n\n");
        1:   37-block  0
call    0 returned 1
        1:   38:    while (tmp) {
unconditional  0 taken 1
        1:   38-block  0
branch  1 taken 1
branch  2 taken 0 (fallthrough)
        1:   39:        if(i==0){
        1:   39-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   40:            return termD;
        1:   40-block  0
unconditional  0 taken 1
        -:   41:        termD = dateToInt(date_now)-dateToInt(tmp->BDay);
        -:   42:        if(termD/365>=60){
        -:   43:            printf("%s %s %s, " ,tmp->Name,tmp->LastName,tmp->MatherName);
        -:   44:        }
        -:   45:        }
    #####:   46:        i++;
    #####:   47:        tmp=tmp->next;
    $$$$$:   47-block  0
unconditional  0 never executed
        -:   48:    }
    #####:   49:}
    $$$$$:   49-block  0
unconditional  0 never executed
        -:   50:
function BD called 1 returned 100% blocks executed 42%
        1:   51:int BD(DblList *lst, char date_now[15]){
        1:   51-block  0
        1:   52:    list *tmp = lst->head;
        1:   53:    int termD=0;
        1:   54:    int i=0;
        1:   55:    while (tmp) {
        1:   55-block  0
unconditional  0 taken 1
        1:   55-block  1
branch  1 taken 1
branch  2 taken 0 (fallthrough)
        1:   56:        if(i==0)
        1:   56-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   57:        return termD;
        1:   57-block  0
unconditional  0 taken 1
    #####:   58:        termD = dateToInt(date_now)-dateToInt(tmp->BDay);
    $$$$$:   58-block  0
call    0 never executed
call    1 never executed
    #####:   59:        if(termD%365<=30)
branch  0 never executed
branch  1 never executed
    #####:   60:            printf("\n\t%s %s %s %s \n",tmp->Name,tmp->LastName,tmp->MatherName, tmp->BDay);
    $$$$$:   60-block  0
call    0 never executed
unconditional  1 never executed
    #####:   61:            i++;
    #####:   62:        tmp=tmp->next;
    $$$$$:   62-block  0
unconditional  0 never executed
        -:   63:    }
    #####:   64:    printf(": birthday is coming!!!\n");
    $$$$$:   64-block  0
call    0 never executed
    #####:   65:}
unconditional  0 never executed
        -:   66:
        -:   67:
function findFields called 14 returned 100% blocks executed 94%
       14:   68:int findFields(DblList *lst, char a[50], int f, int ii){
       14:   68-block  0
       14:   69:    list *tmp=lst->head;
       14:   70:    switch (f) {
       14:   70-block  0
branch  0 taken 1
branch  1 taken 1
branch  2 taken 1
branch  3 taken 2
branch  4 taken 1
branch  5 taken 1
branch  6 taken 1
branch  7 taken 1
branch  8 taken 1
branch  9 taken 1
branch 10 taken 1
branch 11 taken 1
branch 12 taken 1
        -:   71:        case 1:
        -:   72:        {
        1:   73:            return 1;
        1:   73-block  0
unconditional  0 taken 1
        -:   74:            while(tmp){
        -:   75:            if(strcmp (a, tmp->Name)==0){
        -:   76:                printf("%s %s %s %s %s %s %s %s %s %s %s %s \n",tmp->Name,tmp->LastName,tmp->MatherName,tmp->BDay,tmp->PassNum,tmp->SocialNum,tmp->Education,tmp->Position,tmp->Salaru,tmp->DateOfEmployment,tmp->NoteP,tmp->NoteM);
        -:   77:                ii++;
        -:   78:                }
        -:   79:                tmp = tmp->next;
        -:   80:            }
        -:   81:            break;
        -:   82:        }
        -:   83:        case 2:
        -:   84:        {
        1:   85:        return 2;
        1:   85-block  0
unconditional  0 taken 1
        -:   86:        while(tmp){
        -:   87:            if(strcmp (a, tmp->LastName)==0){
        -:   88:                printf("%s %s %s %s %s %s %s %s %s %s %s %s\n",tmp->Name,tmp->LastName,tmp->MatherName,tmp->BDay,tmp->PassNum,tmp->SocialNum,tmp->Education,tmp->Position,tmp->Salaru,tmp->DateOfEmployment,tmp->NoteP,tmp->NoteM);
        -:   89:                ii++;
        -:   90:                }
        -:   91:                tmp = tmp->next;
        -:   92:            }
        -:   93:            break;
        -:   94:        }
        -:   95:        case 3:
        -:   96:        {
        1:   97:            return 3;
        1:   97-block  0
unconditional  0 taken 1
        -:   98:            while(tmp){
        -:   99:            if(strcmp (a, tmp->MatherName)==0){
        -:  100:                printf("%s %s %s %s %s %s %s %s %s %s %s %s\n",tmp->Name,tmp->LastName,tmp->MatherName,tmp->BDay,tmp->PassNum,tmp->SocialNum,tmp->Education,tmp->Position,tmp->Salaru,tmp->DateOfEmployment,tmp->NoteP,tmp->NoteM);
        -:  101:                    ii++;
        -:  102:                }
        -:  103:                tmp = tmp->next;
        -:  104:            }
        -:  105:            break;
        -:  106:        }
        -:  107:            case 4:
        -:  108:            {
        8:  109:            while(tmp){
        2:  109-block  0
unconditional  0 taken 2
        8:  109-block  1
branch  1 taken 7
branch  2 taken 1 (fallthrough)
        7:  110:                if(strcmp (a, tmp->BDay)==0){
        7:  110-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 6
        1:  111:                    printf("%s %s %s %s %s %s %s %s %s %s %s %s\n",tmp->Name,tmp->LastName,tmp->MatherName,tmp->BDay,tmp->PassNum,tmp->SocialNum,tmp->Education,tmp->Position,tmp->Salaru,tmp->DateOfEmployment,tmp->NoteP,tmp->NoteM);
        1:  111-block  0
call    0 returned 1
        1:  112:                    ii++;
        1:  113:                    int i=0;
        1:  114:                    if(i==0)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  115:                    return 4; 
        1:  115-block  0
unconditional  0 taken 1
    #####:  116:                    i++;
    $$$$$:  116-block  0
unconditional  0 never executed
        -:  117:                }
        6:  118:                tmp = tmp->next;
        6:  118-block  0
unconditional  0 taken 6
        -:  119:            }
        1:  120:            break;
        1:  120-block  0
unconditional  0 taken 1
        -:  121:            }
        -:  122:            case 5:
        -:  123:            {
        1:  124:                return 5;
        1:  124-block  0
unconditional  0 taken 1
        -:  125:            while(tmp){
        -:  126:            if(strcmp (a, tmp->PassNum)==0){
        -:  127:                printf("%s %s %s %s %s %s %s %s %s %s %s %s\n",tmp->Name,tmp->LastName,tmp->MatherName,tmp->BDay,tmp->PassNum,tmp->SocialNum,tmp->Education,tmp->Position,tmp->Salaru,tmp->DateOfEmployment,tmp->NoteP,tmp->NoteM);
        -:  128:                ii++;
        -:  129:                }
        -:  130:                tmp = tmp->next;
        -:  131:            }
        -:  132:            break;
        -:  133:            }
        -:  134:            case 6:
        -:  135:            {
        7:  136:            while(tmp){
        1:  136-block  0
unconditional  0 taken 1
        7:  136-block  1
branch  1 taken 6
branch  2 taken 1 (fallthrough)
        6:  137:            if(strcmp (a, tmp->SocialNum)==0){
        6:  137-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 5
        1:  138:                printf("%s %s %s %s %s %s %s %s %s %s %s %s\n",tmp->Name,tmp->LastName,tmp->MatherName,tmp->BDay,tmp->PassNum,tmp->SocialNum,tmp->Education,tmp->Position,tmp->Salaru,tmp->DateOfEmployment,tmp->NoteP,tmp->NoteM);
        1:  138-block  0
call    0 returned 1
        1:  139:                ii++;
unconditional  0 taken 1
        -:  140:                }
        6:  141:                tmp = tmp->next;
        6:  141-block  0
unconditional  0 taken 6
        -:  142:            }
        1:  143:            return 6;
        1:  143-block  0
unconditional  0 taken 1
        -:  144:            break;
        -:  145:            }
        -:  146:            case 7:
        -:  147:            {
        7:  148:            while(tmp){
        1:  148-block  0
unconditional  0 taken 1
        7:  148-block  1
branch  1 taken 6
branch  2 taken 1 (fallthrough)
        6:  149:            if(strcmp (a, tmp->Education)==0){
        6:  149-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 5
        1:  150:                printf("%s %s %s %s %s %s %s %s %s %s %s %s\n",tmp->Name,tmp->LastName,tmp->MatherName,tmp->BDay,tmp->PassNum,tmp->SocialNum,tmp->Education,tmp->Position,tmp->Salaru,tmp->DateOfEmployment,tmp->NoteP,tmp->NoteM);
        1:  150-block  0
call    0 returned 1
        1:  151:                ii++;
unconditional  0 taken 1
        -:  152:                }
        6:  153:                tmp = tmp->next;
        6:  153-block  0
unconditional  0 taken 6
        -:  154:            }
        1:  155:            return 7;
        1:  155-block  0
unconditional  0 taken 1
        -:  156:            break;
        -:  157:            }
        -:  158:            case 8:
        -:  159:            {
        7:  160:            while(tmp){
        1:  160-block  0
unconditional  0 taken 1
        7:  160-block  1
branch  1 taken 6
branch  2 taken 1 (fallthrough)
        6:  161:            if(strcmp (a, tmp->Position)==0){
        6:  161-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 5
        1:  162:                printf("%s %s %s %s %s %s %s %s %s %s %s %s\n",tmp->Name,tmp->LastName,tmp->MatherName,tmp->BDay,tmp->PassNum,tmp->SocialNum,tmp->Education,tmp->Position,tmp->Salaru,tmp->DateOfEmployment,tmp->NoteP,tmp->NoteM);
        1:  162-block  0
call    0 returned 1
        1:  163:                ii++;
unconditional  0 taken 1
        -:  164:                }
        6:  165:                tmp = tmp->next;
        6:  165-block  0
unconditional  0 taken 6
        -:  166:            }
        1:  167:            return 8;
        1:  167-block  0
unconditional  0 taken 1
        -:  168:            break;
        -:  169:            }
        -:  170:            case 9:
        -:  171:            {
        7:  172:            while(tmp){
        1:  172-block  0
unconditional  0 taken 1
        7:  172-block  1
branch  1 taken 6
branch  2 taken 1 (fallthrough)
        6:  173:            if(strcmp (a, tmp->Salaru)==0){
        6:  173-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 5
        1:  174:                printf("%s %s %s %s %s %s %s %s %s %s %s %s\n",tmp->Name,tmp->LastName,tmp->MatherName,tmp->BDay,tmp->PassNum,tmp->SocialNum,tmp->Education,tmp->Position,tmp->Salaru,tmp->DateOfEmployment,tmp->NoteP,tmp->NoteM);
        1:  174-block  0
call    0 returned 1
        1:  175:                ii++;
unconditional  0 taken 1
        -:  176:                }
        6:  177:                tmp = tmp->next;
        6:  177-block  0
unconditional  0 taken 6
        -:  178:            }
        1:  179:            return 9;
        1:  179-block  0
unconditional  0 taken 1
        -:  180:            break;
        -:  181:            }
        -:  182:            case 10:
        -:  183:            {
        7:  184:            while(tmp){
        1:  184-block  0
unconditional  0 taken 1
        7:  184-block  1
branch  1 taken 6
branch  2 taken 1 (fallthrough)
        6:  185:            if(strcmp (a, tmp->DateOfEmployment)==0){
        6:  185-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 5
        1:  186:                printf("%s %s %s %s %s %s %s %s %s %s %s %s\n",tmp->Name,tmp->LastName,tmp->MatherName,tmp->BDay,tmp->PassNum,tmp->SocialNum,tmp->Education,tmp->Position,tmp->Salaru,tmp->DateOfEmployment,tmp->NoteP,tmp->NoteM);
        1:  186-block  0
call    0 returned 1
        1:  187:                ii++;
unconditional  0 taken 1
        -:  188:                }
        6:  189:                tmp = tmp->next;
        6:  189-block  0
unconditional  0 taken 6
        -:  190:            }
        1:  191:            return 10;
        1:  191-block  0
unconditional  0 taken 1
        -:  192:            break;
        -:  193:            }
        -:  194:            case 11:
        -:  195:            {
        7:  196:            while(tmp){
        1:  196-block  0
unconditional  0 taken 1
        7:  196-block  1
branch  1 taken 6
branch  2 taken 1 (fallthrough)
        6:  197:            if(strcmp (a, tmp->NoteP)==0){
        6:  197-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 5
        1:  198:                printf("%s %s %s %s %s %s %s %s %s %s %s %s\n",tmp->Name,tmp->LastName,tmp->MatherName,tmp->BDay,tmp->PassNum,tmp->SocialNum,tmp->Education,tmp->Position,tmp->Salaru,tmp->DateOfEmployment,tmp->NoteP,tmp->NoteM);
        1:  198-block  0
call    0 returned 1
        1:  199:                ii++;
unconditional  0 taken 1
        -:  200:                }
        6:  201:                tmp = tmp->next;
        6:  201-block  0
unconditional  0 taken 6
        -:  202:            }
        1:  203:            return 11;
        1:  203-block  0
unconditional  0 taken 1
        -:  204:            break;
        -:  205:            }
        -:  206:            case 12:
        -:  207:            {
        7:  208:            while(tmp){
        1:  208-block  0
unconditional  0 taken 1
        7:  208-block  1
branch  1 taken 6
branch  2 taken 1 (fallthrough)
        6:  209:            if(strcmp (a, tmp->NoteP)==0){
        6:  209-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    #####:  210:                printf("%s %s %s %s %s %s %s %s %s %s %s %s\n",tmp->Name,tmp->LastName,tmp->MatherName,tmp->BDay,tmp->PassNum,tmp->SocialNum,tmp->Education,tmp->Position,tmp->Salaru,tmp->DateOfEmployment,tmp->NoteP,tmp->NoteM);
    $$$$$:  210-block  0
call    0 never executed
    #####:  211:                ii++;
unconditional  0 never executed
        -:  212:                }
        6:  213:                tmp = tmp->next;
        6:  213-block  0
unconditional  0 taken 6
        -:  214:            }
        1:  215:            return 12;
        1:  215-block  0
unconditional  0 taken 1
        -:  216:            break;
        -:  217:            }
        -:  218:        default:
        -:  219:        {
        1:  220:            return 13;
        1:  220-block  0
unconditional  0 taken 1
        -:  221:            break;
        -:  222:        }
        -:  223:    }
        1:  224:    if(ii==0) 
        1:  224-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:  225:    {
        1:  226:    printf("Your search - %s - did not match any documents.", a);
        1:  226-block  0
call    0 returned 1
        1:  227:    return 14;
unconditional  0 taken 1
        -:  228:    }
    #####:  229:}
    $$$$$:  229-block  0
unconditional  0 never executed
        -:  230:
function Dismiss called 1 returned 100% blocks executed 39%
        1:  231:int Dismiss(DblList *lst, char name[15], char lastN[15], char matherN[15], char pass[15]) {
        1:  231-block  0
        1:  232:    list *tmp = lst->head;
        7:  233:    while (tmp) {
        1:  233-block  0
unconditional  0 taken 1
        7:  233-block  1
branch  1 taken 6
branch  2 taken 1 (fallthrough)
        6:  234:        if((strcmp (name, tmp->Name)==0)&& (strcmp(lastN, tmp->LastName)==0)&& (strcmp(matherN, tmp->MatherName)==0) && (strcmp(pass, tmp->PassNum)==0)){
        6:  234-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 5
        1:  234-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    $$$$$:  234-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:  234-block  3
branch  6 never executed
branch  7 never executed
    #####:  235:            if (tmp->prev) {
    $$$$$:  235-block  0
branch  0 never executed
branch  1 never executed
    #####:  236:                tmp->prev->next = tmp->next;
    $$$$$:  236-block  0
unconditional  0 never executed
        -:  237:            }
    #####:  238:            if (tmp->next) {
    $$$$$:  238-block  0
branch  0 never executed
branch  1 never executed
    #####:  239:                tmp->next->prev = tmp->prev;
    $$$$$:  239-block  0
unconditional  0 never executed
        -:  240:            }
    #####:  241:            if (!tmp->prev) {
    $$$$$:  241-block  0
branch  0 never executed
branch  1 never executed
    #####:  242:                lst->head = tmp->next;
    $$$$$:  242-block  0
unconditional  0 never executed
        -:  243:            }
    #####:  244:            if (!tmp->next) {
    $$$$$:  244-block  0
branch  0 never executed
branch  1 never executed
    #####:  245:                lst->tail = tmp->prev;
    $$$$$:  245-block  0
unconditional  0 never executed
        -:  246:            }
    #####:  247:            free(tmp);
    #####:  248:            lst->size--;
    #####:  249:            printf("FARED");
    $$$$$:  249-block  0
call    0 never executed
unconditional  1 never executed
        -:  250:        }
        6:  251:        tmp=tmp->next;
        6:  251-block  0
unconditional  0 taken 6
        -:  252:    }
        1:  253:    return 87;
        1:  253-block  0
unconditional  0 taken 1
        -:  254:}
        -:  255:
function ex called 1 returned 100% blocks executed 100%
        1:  256:int ex(DblList *lst, FILE *file){
        1:  256-block  0
        1:  257:    list *tmp=lst->head;
        1:  258:    file = fopen("Untitled.txt","w");
        1:  258-block  0
call    0 returned 1
        7:  259:    while(tmp){
unconditional  0 taken 1
        7:  259-block  0
branch  1 taken 6
branch  2 taken 1 (fallthrough)
        6:  260:        fprintf(file, "%s %s %s %s %s %s %s %s %s %s %s %s",tmp->Name,tmp->LastName,tmp->MatherName,tmp->BDay,tmp->PassNum,tmp->SocialNum,tmp->Education,tmp->Position,tmp->Salaru,tmp->DateOfEmployment,tmp->NoteP,tmp->NoteM);
        6:  260-block  0
call    0 returned 6
        6:  261:        tmp = tmp->next;
        6:  262:        if (tmp) 
branch  0 taken 5 (fallthrough)
branch  1 taken 1
        5:  263:        fprintf(file, "\n");
        5:  263-block  0
call    0 returned 5
unconditional  1 taken 5
        -:  264:    }
        1:  265:    return 2;
        1:  265-block  0
unconditional  0 taken 1
        -:  266:}
